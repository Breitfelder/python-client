# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pyuast')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pyuast')
    _pyuast = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyuast', [dirname(__file__)])
        except ImportError:
            import _pyuast
            return _pyuast
        try:
            _mod = imp.load_module('_pyuast', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pyuast = swig_import_helper()
    del swig_import_helper
else:
    import _pyuast
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyuast.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pyuast.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyuast.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyuast.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyuast.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyuast.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyuast.SwigPyIterator_copy(self)

    def next(self):
        return _pyuast.SwigPyIterator_next(self)

    def __next__(self):
        return _pyuast.SwigPyIterator___next__(self)

    def previous(self):
        return _pyuast.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyuast.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyuast.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyuast.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyuast.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyuast.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyuast.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyuast.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pyuast.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Position(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr
    __swig_setmethods__["offset"] = _pyuast.Position_offset_set
    __swig_getmethods__["offset"] = _pyuast.Position_offset_get
    if _newclass:
        offset = _swig_property(_pyuast.Position_offset_get, _pyuast.Position_offset_set)
    __swig_setmethods__["line"] = _pyuast.Position_line_set
    __swig_getmethods__["line"] = _pyuast.Position_line_get
    if _newclass:
        line = _swig_property(_pyuast.Position_line_get, _pyuast.Position_line_set)
    __swig_setmethods__["col"] = _pyuast.Position_col_set
    __swig_getmethods__["col"] = _pyuast.Position_col_get
    if _newclass:
        col = _swig_property(_pyuast.Position_col_get, _pyuast.Position_col_set)

    def __init__(self):
        this = _pyuast.new_Position()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyuast.delete_Position
    __del__ = lambda self: None
Position_swigregister = _pyuast.Position_swigregister
Position_swigregister(Position)

class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    if _newclass:
        initialize = staticmethod(_pyuast.Node_initialize)
    else:
        initialize = _pyuast.Node_initialize
    if _newclass:
        cleanup = staticmethod(_pyuast.Node_cleanup)
    else:
        cleanup = _pyuast.Node_cleanup

    def __init__(self, internal_type):
        this = _pyuast.new_Node(internal_type)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyuast.delete_Node
    __del__ = lambda self: None
    __swig_setmethods__["internal_type"] = _pyuast.Node_internal_type_set
    __swig_getmethods__["internal_type"] = _pyuast.Node_internal_type_get
    if _newclass:
        internal_type = _swig_property(_pyuast.Node_internal_type_get, _pyuast.Node_internal_type_set)
    __swig_setmethods__["token"] = _pyuast.Node_token_set
    __swig_getmethods__["token"] = _pyuast.Node_token_get
    if _newclass:
        token = _swig_property(_pyuast.Node_token_get, _pyuast.Node_token_set)
    __swig_setmethods__["roles_str"] = _pyuast.Node_roles_str_set
    __swig_getmethods__["roles_str"] = _pyuast.Node_roles_str_get
    if _newclass:
        roles_str = _swig_property(_pyuast.Node_roles_str_get, _pyuast.Node_roles_str_set)
    __swig_setmethods__["children"] = _pyuast.Node_children_set
    __swig_getmethods__["children"] = _pyuast.Node_children_get
    if _newclass:
        children = _swig_property(_pyuast.Node_children_get, _pyuast.Node_children_set)
    __swig_setmethods__["roles"] = _pyuast.Node_roles_set
    __swig_getmethods__["roles"] = _pyuast.Node_roles_get
    if _newclass:
        roles = _swig_property(_pyuast.Node_roles_get, _pyuast.Node_roles_set)
    __swig_setmethods__["properties"] = _pyuast.Node_properties_set
    __swig_getmethods__["properties"] = _pyuast.Node_properties_get
    if _newclass:
        properties = _swig_property(_pyuast.Node_properties_get, _pyuast.Node_properties_set)
    __swig_setmethods__["start_position"] = _pyuast.Node_start_position_set
    __swig_getmethods__["start_position"] = _pyuast.Node_start_position_get
    if _newclass:
        start_position = _swig_property(_pyuast.Node_start_position_get, _pyuast.Node_start_position_set)
    __swig_setmethods__["end_position"] = _pyuast.Node_end_position_set
    __swig_getmethods__["end_position"] = _pyuast.Node_end_position_get
    if _newclass:
        end_position = _swig_property(_pyuast.Node_end_position_get, _pyuast.Node_end_position_set)

    def add_role(self, role):
        return _pyuast.Node_add_role(self, role)

    def add_child(self, child):
        return _pyuast.Node_add_child(self, child)

    def set_property(self, key, value):
        return _pyuast.Node_set_property(self, key, value)

    def as_string(self):
        return _pyuast.Node_as_string(self)

    def find(self, query):
        return _pyuast.Node_find(self, query)

    def go_to_parent(self, jumps):
        return _pyuast.Node_go_to_parent(self, jumps)

    def __str__(self):
        return _pyuast.Node___str__(self)
Node_swigregister = _pyuast.Node_swigregister
Node_swigregister(Node)

def Node_initialize():
    return _pyuast.Node_initialize()
Node_initialize = _pyuast.Node_initialize

def Node_cleanup():
    return _pyuast.Node_cleanup()
Node_cleanup = _pyuast.Node_cleanup

class NodeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyuast.NodeVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyuast.NodeVector___nonzero__(self)

    def __bool__(self):
        return _pyuast.NodeVector___bool__(self)

    def __len__(self):
        return _pyuast.NodeVector___len__(self)

    def __getslice__(self, i, j):
        return _pyuast.NodeVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyuast.NodeVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyuast.NodeVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyuast.NodeVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyuast.NodeVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyuast.NodeVector___setitem__(self, *args)

    def pop(self):
        return _pyuast.NodeVector_pop(self)

    def append(self, x):
        return _pyuast.NodeVector_append(self, x)

    def empty(self):
        return _pyuast.NodeVector_empty(self)

    def size(self):
        return _pyuast.NodeVector_size(self)

    def swap(self, v):
        return _pyuast.NodeVector_swap(self, v)

    def begin(self):
        return _pyuast.NodeVector_begin(self)

    def end(self):
        return _pyuast.NodeVector_end(self)

    def rbegin(self):
        return _pyuast.NodeVector_rbegin(self)

    def rend(self):
        return _pyuast.NodeVector_rend(self)

    def clear(self):
        return _pyuast.NodeVector_clear(self)

    def get_allocator(self):
        return _pyuast.NodeVector_get_allocator(self)

    def pop_back(self):
        return _pyuast.NodeVector_pop_back(self)

    def erase(self, *args):
        return _pyuast.NodeVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyuast.new_NodeVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyuast.NodeVector_push_back(self, x)

    def front(self):
        return _pyuast.NodeVector_front(self)

    def back(self):
        return _pyuast.NodeVector_back(self)

    def assign(self, n, x):
        return _pyuast.NodeVector_assign(self, n, x)

    def resize(self, *args):
        return _pyuast.NodeVector_resize(self, *args)

    def insert(self, *args):
        return _pyuast.NodeVector_insert(self, *args)

    def reserve(self, n):
        return _pyuast.NodeVector_reserve(self, n)

    def capacity(self):
        return _pyuast.NodeVector_capacity(self)
    __swig_destroy__ = _pyuast.delete_NodeVector
    __del__ = lambda self: None
NodeVector_swigregister = _pyuast.NodeVector_swigregister
NodeVector_swigregister(NodeVector)

class PropMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyuast.PropMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyuast.PropMap___nonzero__(self)

    def __bool__(self):
        return _pyuast.PropMap___bool__(self)

    def __len__(self):
        return _pyuast.PropMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _pyuast.PropMap___getitem__(self, key)

    def __delitem__(self, key):
        return _pyuast.PropMap___delitem__(self, key)

    def has_key(self, key):
        return _pyuast.PropMap_has_key(self, key)

    def keys(self):
        return _pyuast.PropMap_keys(self)

    def values(self):
        return _pyuast.PropMap_values(self)

    def items(self):
        return _pyuast.PropMap_items(self)

    def __contains__(self, key):
        return _pyuast.PropMap___contains__(self, key)

    def key_iterator(self):
        return _pyuast.PropMap_key_iterator(self)

    def value_iterator(self):
        return _pyuast.PropMap_value_iterator(self)

    def __setitem__(self, *args):
        return _pyuast.PropMap___setitem__(self, *args)

    def asdict(self):
        return _pyuast.PropMap_asdict(self)

    def __init__(self, *args):
        this = _pyuast.new_PropMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _pyuast.PropMap_empty(self)

    def size(self):
        return _pyuast.PropMap_size(self)

    def swap(self, v):
        return _pyuast.PropMap_swap(self, v)

    def begin(self):
        return _pyuast.PropMap_begin(self)

    def end(self):
        return _pyuast.PropMap_end(self)

    def rbegin(self):
        return _pyuast.PropMap_rbegin(self)

    def rend(self):
        return _pyuast.PropMap_rend(self)

    def clear(self):
        return _pyuast.PropMap_clear(self)

    def get_allocator(self):
        return _pyuast.PropMap_get_allocator(self)

    def count(self, x):
        return _pyuast.PropMap_count(self, x)

    def erase(self, *args):
        return _pyuast.PropMap_erase(self, *args)

    def find(self, x):
        return _pyuast.PropMap_find(self, x)

    def lower_bound(self, x):
        return _pyuast.PropMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _pyuast.PropMap_upper_bound(self, x)
    __swig_destroy__ = _pyuast.delete_PropMap
    __del__ = lambda self: None
PropMap_swigregister = _pyuast.PropMap_swigregister
PropMap_swigregister(PropMap)

# This file is compatible with both classic and new-style classes.


